1. Przegląd specyfikacji i założeń
   1.1 Przeczytać “Podsumowanie” w specyfikacji, zidentyfikować moduły: dynamiczny pasek postępu, popup “Czytaj więcej”, system rekomendacji
   1.2 Wypisać wymagania funkcjonalne:
   1.2.1 Dynamiczne śledzenie scrolla i obliczanie procentu czytanego tekstu
   1.2.2 Wyzwalacze popupu: osiągnięcie progu %, czas > 60 s, zmiana kierunku scrolla
   1.2.3 Dobór artykułów według popularności, tagów, daty
   1.3 Wyodrębnić wymagania niefunkcjonalne:
   1.3.1 Kompatybilność z Elementor, WP Bakery, Gutenberg, edytorem natywnym
   1.3.2 Optymalizacja: lazy loading, cache, sanitizacja, pomiar CLS/LCP
   1.4 Sprawdzić środowisko: WP ≥ 5.6, PHP ≥ 7.4, MySQL ≥ 5.7, ES6+

2. Przygotowanie środowiska deweloperskiego
   2.1 Utworzyć repozytorium Git re-progress\_bar
   2.2 Skonfigurować SEMVER i .gitignore dla WordPress
   2.3 Zainstalować lokalne WP 5.6+ na XAMPP/Lando, bazę MySQL 5.7+
   2.4 Zainstalować narzędzia:
   2.4.1 PHP 7.4+ i Composer
   2.4.2 WP CLI
   2.4.3 ESLint + Prettier (JS ES6+) i PHP\_CodeSniffer (PSR-12)
   2.4.4 PHPUnit i Jest
   2.5 Utworzyć CI (GitHub Actions) do lintingu i testów

3. Inicjalizacja pluginu
   3.1 Stworzyć re-progress\_bar.php z nagłówkiem (nazwa, wersja, autor, licencja)
   3.2 Zarejestrować hook plugins\_loaded, załadować autoloader (Composer lub własny)
   3.3 Zadeklarować namespace ReProgressBar i klasy:
   3.3.1 Bootstrap (inicjalizacja modułów)
   3.3.2 Admin\Settings (rejestracja ustawień)
   3.3.3 Frontend\ProgressTracker
   3.4 Dodać hooki i filtry w metodzie run() klasy Bootstrap

4. Moduł śledzenia postępu (Progress Bar)
   4.1 Enqueue w wp\_enqueue\_scripts:
   4.1.1 Skrypt JS (IntersectionObserver)
   4.1.2 Styl CSS paska (zmienne pozycji, wysokości, kolorów)
   4.2 W JS obliczać procent i emitować zdarzenia:
   4.2.1 Obliczanie procentu (scrollTop ÷ (documentHeight – viewportHeight))
   4.2.2 Emitowanie reProgressThresholdReached
   4.3 Ignorować nagłówki, stopki, elementy sticky
   4.4 Udostępnić w PHP get\_progress\_data()
   4.5 Testować na różnych motywach i układach

5. Panel administracyjny
   5.1 Zarejestrować stronę ustawień (admin\_menu, Settings API)
   5.2 Dodać pola konfiguracyjne:
   5.2.1 Pasek postępu: pozycja, wysokość, kolory, selektory CSS, typy postów
   5.2.2 Popup “Czytaj Więcej”: próg %, opóźnienie, kierunek scrolla, edytor WYSIWYG
   5.2.3 Rekomendacje: tryb, liczba pozycji, układ, integracja API
   5.3 Sanityzować wartości (sanitize\_text\_field, sanitize\_hex\_color, absint)

6. Popup “Czytaj więcej”
   6.1 Enqueue skryptów i stylów
   6.2 Implementować wyzwalacze:
   6.2.1 Osiągnięcie progu %
   6.2.2 Czas na stronie > 60 s
   6.2.3 Zmiana kierunku scrolla po powrocie do góry
   6.3 Przekazać parametry przez wp\_localize\_script
   6.4 Emitować re\_progress\_popup\_trigger w JS
   6.5 Moduł personalizacji wyglądu i zawartości

7. Silnik rekomendacji
   7.1 Klasa pobierająca propozycje:
   7.1.1 Popularność (wyświetlenia, komentarze)
   7.1.2 Tagi i kategorie
   7.1.3 Data publikacji
   7.2 Cache’owanie wyników (Transients API/Redis/Memcached)
   7.3 Filtry i hooki (apply\_filters, do\_action)
   7.4 Fallback do sortowania po dacie

8. Kompatybilność z Page Builderami
   8.1 Analiza API Elementor, WPBakery, Gutenberg
   8.2 Elementor:
   8.2.1 Rejestracja widgetu w widgets\_manager
   8.2.2 Klasa Widget\_Progress\_Bar (get\_name, get\_title, get\_icon, register\_controls, render)
   8.3 WPBakery:
   8.3.1 vc\_map() shortcode
   8.3.2 Funkcja renderująca HTML/CSS/JS
   8.4 Gutenberg:
   8.4.1 registerBlockType blok React
   8.4.2 Enqueue edytorowych i front-endowych skryptów/style
   8.5 Fallback: globalny shortcode re\_progress\_bar (filter the\_content)

9. Bezpieczeństwo i optymalizacja
   9.1 Sanityzacja i eskalacja (sanitize\_text\_field, esc\_attr, esc\_html, wp\_kses\_post)
   9.2 Lazy loading zasobów:
   9.2.1 wp\_register\_script(..., true)
   9.2.2 loading="lazy" dla obrazów
   9.3 Minifikacja i bundling przez webpack (production mode)
   9.4 CI z Lighthouse CI dla CLS i LCP

10. Testy i kontrola jakości
    10.1 Testy PHP (tests/php/):
    10.1.1 Klasy rozszerzające WP\_UnitTestCase
    10.1.2 Testy hooków, obliczeń procentu, sanityzacji
    10.2 Testy JS (tests/js/):
    10.2.1 Obliczanie procentu
    10.2.2 Wyzwalacze popupu
    10.2.3 Hooki eventowe (Jest)
    10.3 Testy manualne:
    10.3.1 Matryca testów: motywy, buildery
    10.3.2 Weryfikacja paska, popupu, rekomendacji, fallback
    10.4 CI na GitHub Actions: PHP\_CodeSniffer, ESLint, PHPUnit, Jest

11. Dokumentacja i przygotowanie do wydania
    11.1 README.md:
    11.1.1 Sekcje: Wprowadzenie, Wymagania, Instalacja, Konfiguracja panelu, Użycie shortcodów/bloku, Przykłady, FAQ
    11.2 Changelog:
    11.2.1 Keep a Changelog: wersja, data, dodane, zmienione, usunięte, naprawione
    11.3 readme.txt:
    11.3.1 Krótkie streszczenie, instrukcja instalacji, link do dokumentacji, sekcja “Upgrade Notice”
    11.4 Pakowanie ZIP:
    11.4.1 Zawrzeć pliki pluginu, includes/, assets/, languages/, readme.txt
    11.4.2 Wykluczyć .gitignore, .editorconfig, tests/, vendor/, build/

12. Wskazówki do dalszego rozwoju
    12.1 Wersjonowanie REST API: stała REPB\_API\_VERSION, trasy /v1/, migracje pod v2
    12.2 A/B testing popupów: feature flags, losowy podział użytkowników
    12.3 Analityka zaangażowania:
    12.3.1 Eventy JS do dataLayer (GA)
    12.3.2 Metryki CTR, czas do końca scrolla
    12.3.3 Analiza raportów, optymalizacja algorytmu
